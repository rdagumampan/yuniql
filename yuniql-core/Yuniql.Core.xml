<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yuniql.Core</name>
    </assembly>
    <members>
        <member name="T:Yuniql.Core.Configuration">
            <summary>
            Global singleton instance of session configuration
            </summary>
        </member>
        <member name="M:Yuniql.Core.Configuration.#cctor">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.Configuration.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:Yuniql.Core.Configuration.Instance">
            <summary>
            Returns global singleton instance of session configuration
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsInitialized">
            <summary>
            Returns true when global configuration has been initiatlized via configurationService.Initialize()
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.Workspace">
            <summary>
            The directory where yuniql-based migration project is placed.
            This is a required property.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.Platform">
            <summary>
            Target database platform. Value can be `sqlserver`,`postgresql`, or `mysql`.
            This is a required property.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.ConnectionString">
            <summary>
            The connection string to the target database server.
            This is a required property.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsAutoCreateDatabase">
            <summary>
            When true, automatically creates database in target database server.
            This is defaulted to false.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.TargetVersion">
            <summary>
            Runs migration only up to the version specified in this property. 
            When Null, it will run upto latest unapplied version.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.Tokens">
            <summary>
            The list of token key/value pairs to repair tokens in each script file. 
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsVerifyOnly">
            <summary>
            When you run yuniql verify, it checks if all your versions can be executed without errors. 
            It runs through all the non-versioned script folders (except _init) and all migration steps that yuninql run takes but without committing the transaction. 
            All changes are rolledback after a successful verification run.
            This is defaulted to false.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.BulkSeparator">
            <summary>
            Bulk file values separator to use when parsing CSV bulk import files.
            This is defaulted to comma ",".
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.BulkBatchSize">
            <summary>
            The size of each batch when performing bulk load. This may not be used in non-sqlserver platforms.
            This is defaulted to 0.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.CommandTimeout">
            <summary>
            The time it taks to wait for one commend to execute before it expires and throws error.
            Use this prorty to adjust time out when you expect a long running migration execution.
            This is defaulted to 30 secs.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsDebug">
            <summary>
            Enrich trace messages with raw sql statements and more verbose diagnostic messages.
            Use this when you are investigating some failed migrations.
            This is defaulted to false.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.AppliedByTool">
            <summary>
            Describes the source of migration applied to target database.
            This is defaulted to yuniql-cli.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.AppliedByToolVersion">
            <summary>
            Describes the version of source of migration applied to target database.
            This is defaulted to yuniql.core assembly version.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.Environment">
            <summary>
            Environment to target when running migration with environment-aware scripts.
            See https://github.com/rdagumampan/yuniql/wiki/environment-aware-scripts
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.MetaSchemaName">
            <summary>
            Schema name for schema versions table.
            This is defaulted to the target data platform's default schema.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.MetaTableName">
            <summary>
            Table name for schema versions table.
            This is defaulted to __yuniqldbversion in all target data platforms.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsContinueAfterFailure">
            <summary>
            When true, forces to skip the the last failed script file and run from next available script in the failed version
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.TransactionMode">
            <summary>
            Transaction mode to use in the migration. Valid options are session, version and none.
            When session, uses single transaction for entire migration run. 
            When version, each version is executed in one transaction.
            When none, no explicit transaction is created for migration run.
            This is defaulted to session.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsRequiredClearedDraft">
            <summary>
            When true, migration will fail if the _draft directory is not empty. This option ideal when targeting staging/production environment.
            This is defaulted to false.
            </summary>
        </member>
        <member name="P:Yuniql.Core.Configuration.IsForced">
            <summary>
            When true, action would be executed. This is required when executing potentially damaging actions such as yuniql-erase and yuniql-drop.
            This is defaulted to false.
            </summary>
        </member>
        <member name="T:Yuniql.Core.ConfigurationService">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.#ctor(Yuniql.Core.IEnvironmentService,Yuniql.Core.IWorkspaceService,Yuniql.Extensibility.ITraceService)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.GetConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.GetValueOrDefault(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.ConfigurationService.PrintAsJson(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.ConnectionExtensions">
            <summary>
            Connection extensions for most common data access methods
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Yuniql.Core.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction)" -->
        <member name="M:Yuniql.Core.ConnectionExtensions.KeepOpen(System.Data.IDbConnection)">
            <summary>
            Opens the connection when its found to be closed.
            </summary>
            <param name="connection">A connection.</param>
            <returns>An active connection.</returns>
        </member>
        <member name="M:Yuniql.Core.ConnectionExtensions.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Execute SQL statement against the active connection and returns number of affected rows.
            </summary>
            <param name="connection">An active connection.</param>
            <param name="commandText">The sql statement to execute with the active connection.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.ConnectionExtensions.ExecuteScalar(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Executes SQL statement against the active connection and returns single row single column result.
            </summary>
            <param name="connection">An active connection.</param>
            <param name="commandText">The sql statement to execute with the active connection.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.ConnectionExtensions.QuerySingleBool(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Executes SQL statement against the active connection and returns scalar value in boolean.
            </summary>
            <param name="connection">An active connection.</param>
            <param name="commandText">The sql statement to execute with the active connection.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.ConnectionExtensions.QuerySingleString(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Executes SQL statement against the active connection and returns scalar value in string.
            </summary>
            <param name="connection">An active connection.</param>
            <param name="commandText">The sql statement to execute with the active connection.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.ConnectionExtensions.QuerySingleRow(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Executes SQL statement against the active connection and returns scalar value in string.
            </summary>
            <param name="connection">An active connection.</param>
            <param name="commandText">The sql statement to execute with the active connection.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written.</param>
            <returns></returns>
        </member>
        <member name="T:Yuniql.Core.DirectoryService">
            <summary>
            Wraps usage of <see cref="T:System.IO.Directory"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.GetDirectories(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.GetAllDirectories(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.GetFiles(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.GetAllFiles(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.Exists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.GetFileCaseInsensitive(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.FilterFiles(System.String,System.String,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.FilterDirectories(System.String,System.String,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.DirectoryService.CreateDirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.EnvironmentService">
            <summary>
            Helper class for extracting environment variables.
            </summary>
        </member>
        <member name="M:Yuniql.Core.EnvironmentService.GetCurrentDirectory">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.EnvironmentService.GetEnvironmentVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.FileService">
            <summary>
            Wraps usage of <see cref="T:System.IO.File"/>.
            </summary>
        </member>
        <member name="M:Yuniql.Core.FileService.ReadAllText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileService.ReadAllEmbeddedText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileService.AppendAllText(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileService.Exists(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.FileTraceService">
            <summary>
            Writes trace information into a text file in the current workspace directory. 
            </summary>
        </member>
        <member name="P:Yuniql.Core.FileTraceService.IsDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileTraceService.Debug(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileTraceService.Info(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileTraceService.Warn(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileTraceService.Error(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.FileTraceService.Success(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Yuniql.Core.IDirectoryService" -->
        <member name="M:Yuniql.Core.IDirectoryService.GetDirectories(System.String,System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.GetDirectories(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.GetAllDirectories(System.String,System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.GetDirectories(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.GetFiles(System.String,System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.GetFiles(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.GetAllFiles(System.String,System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.GetFiles(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.Exists(System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.Exists(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.GetFileCaseInsensitive(System.String,System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.GetFiles(System.String)"/>
            </summary>
        </member>
        <member name="M:Yuniql.Core.IDirectoryService.CreateDirectory(System.String)">
            <summary>
            Wraps <see cref="M:System.IO.Directory.CreateDirectory(System.String)"/>
            </summary>
        </member>
        <member name="T:Yuniql.Core.IEnvironmentService">
            <summary>
            Interface for implementing helper class for extracting environment variables.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IEnvironmentService.GetCurrentDirectory">
            <summary>
            Returns the current directory where yuniql is executed from.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IEnvironmentService.GetEnvironmentVariable(System.String)">
            <summary>
            Extract values of environment variable with respect to OS platform.
            For Windows, the order of ENV variable search is Machine -> User -> Process.
            For Linux, it will always use Process.
            </summary>
            <param name="name">Environment varible name.</param>
            <returns>Value of the environment variable.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Yuniql.Core.IFileService" -->
        <member name="M:Yuniql.Core.IFileService.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all the text in the file, and then closes the file.
            </summary>
            <param name="path">Path of the file to be created.</param>
            <returns>Returns the path of file created.</returns>
        </member>
        <member name="M:Yuniql.Core.IFileService.ReadAllEmbeddedText(System.String)">
            <summary>
            Opens an embedded text file, reads all the text in the file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.IFileService.Exists(System.String)">
            <summary>
            Determines whether the file exists.
            </summary>
            <param name="path">Returns true if file exists.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.IFileService.AppendAllText(System.String,System.String)">
            <summary>
            Wraps <see cref="!:File.AppendAllText"/>
            </summary>
        </member>
        <member name="T:Yuniql.Core.IMetadataService">
            <summary>
            Interface for implementing service responsible for accessing target database configuration and executing sql statement batches.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.IsDatabaseExists(System.Nullable{System.Int32})">
            <summary>
            Returns true when database already exists in the target host.
            </summary>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <returns>Returns true when database already exists in the target host.</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.CreateDatabase(System.Nullable{System.Int32})">
            <summary>
            Creates the database
            </summary>
            <param name="commandTimeout">Command timeout in seconds.</param>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.IsDatabaseConfigured(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns true when migration version tracking table is already created.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <returns>Returns true when version tracking table is already created.</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.CreateSchema(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates schema in target databases.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="commandTimeout">Command timeout in seconds.</param>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.ConfigureDatabase(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates migration version tracking table in the target database.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.UpdateDatabaseConfiguration(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Updates migration version tracking table in the target database..
            </summary>
            <returns>True if target database was updated, otherwise returns false</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.GetCurrentVersion(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the latest version applied in the target database.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <returns>Returns the latest version applied in the target database.</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.GetAllAppliedVersions(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns all versions applied in the target database.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <returns>All versions applied in the target database.</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.GetAllVersions(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns all versions applied in the target database.
            </summary>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <returns>All versions applied in the target database.</returns>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.InsertVersion(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,Yuniql.Core.TransactionContext,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates new entry to version tracking table after all versions were successfully executed.
            </summary>
            <param name="connection">Connection to target database. Connection will be open automatically.</param>
            <param name="transaction">An active transaction.</param>
            <param name="version">Migration version.</param>
            <param name="transactionContext">Transaction context containg last know failed version information.</param>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="appliedByTool">The source that initiates the migration. This can be yuniql-cli, yuniql-aspnetcore or yuniql-azdevops.</param>
            <param name="appliedByToolVersion">The version of the source that initiates the migration.</param>
            <param name="failedScriptPath">The failed script path.</param>
            <param name="failedScriptError">The failed script error.</param>
            <param name="additionalArtifacts">Additional infromation to describe the version executed.</param>
            <param name="durationMs">The duration it takes to complete the version in milliseconds</param>
        </member>
        <member name="M:Yuniql.Core.IMetadataService.ExecuteSql(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <summary>
            Executes sql statement to target database.
            </summary>
            <param name="connection">Connection to target database. Connection will be open automatically.</param>
            <param name="commandText">The sql statement.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
            <param name="transaction">An active transaction.</param>
            <param name="traceService">Trace service provider where trace messages will be written to.</param>
            <returns></returns>
        </member>
        <member name="T:Yuniql.Core.IMigrationService">
            <summary>
            Runs migrations by executing alls scripts in the workspace directory. 
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMigrationService.IsTargetDatabaseLatest(System.String,System.String,System.String)">
            <summary>
            Returns true if the version of target database is equal or greater than local versions
            </summary>
            <param name="version"></param>
            <param name="metaSchemaName"></param>
            <param name="metaTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.IMigrationService.GetCurrentVersion(System.String,System.String)">
            <summary>
            Returns the current migration version applied in target database.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMigrationService.GetAllVersions(System.String,System.String)">
            <summary>
            Returns all migration versions applied in the target database
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMigrationService.Run">
            <summary>
            Runs migrations by executing alls scripts in the workspace directory. 
            When CSV files are present also run bulk import operations to target database table having same file name.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMigrationService.Erase">
            <summary>
            Executes erase scripts presentin _erase directory and subdirectories.
            </summary>
        </member>
        <member name="T:Yuniql.Core.IMigrationServiceFactory">
            <summary>
            Factory class of creating instance of <see cref="T:Yuniql.Core.IMigrationService"/>.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IMigrationServiceFactory.Create">
            <summary>
            Create instance of <see cref="T:Yuniql.Core.IMigrationService"/> with default platform provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.IMigrationServiceFactory.Create(Yuniql.Extensibility.IDataService,Yuniql.Extensibility.IBulkImportService)">
            <summary>
            Create instance of <see cref="T:Yuniql.Core.IMigrationService"/> and uses external data services.
            When targeting PostgreSql or MySql, this is where you can pass the implementation of <see cref="T:Yuniql.Extensibility.IDataService"/> and <see cref="T:Yuniql.Extensibility.IBulkImportService"/>.
            </summary>
            <param name="dataService">Platform specific data service providing compatible SQL statements and connection objects.</param>
            <param name="bulkImportService">Platform specific service provding support for bulk import of CSV files.</param>
            <returns>An instance of <see cref="T:Yuniql.Core.IMigrationService"/> and uses external data services.</returns>
        </member>
        <member name="T:Yuniql.Core.ITokenReplacementService">
            <summary>
            Interface for implementing replacement of tokens in the script using the pattern ${TOKEN_KEY}. 
            Throws exception and fails the migration when some tokens not replaced due to missing token values passed from the client.
            </summary>
        </member>
        <member name="M:Yuniql.Core.ITokenReplacementService.Replace(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Runs token replacement process.
            </summary>
            <param name="tokens">List of token Key/Value pairs.</param>
            <param name="sqlStatement">Raw SQL statement where tokens maybe present.</param>
            <returns>SQL statement where tokens are successfully replaced.</returns>
        </member>
        <member name="T:Yuniql.Core.IWorkspaceService">
            <summary>
            Interface for implementing service responsible for initializing and managing the local workspace. A local workspace is a directory where yuniql operations are operated from.
            </summary>
        </member>
        <member name="M:Yuniql.Core.IWorkspaceService.Init(System.String)">
            <summary>
            Creates the baseline directory structure in the target workspace path.
            </summary>
            <param name="workingPath">The directory path where workspace structure will be created.</param>
        </member>
        <member name="M:Yuniql.Core.IWorkspaceService.GetLatestVersion(System.String)">
            <summary>
            Gets the latest version available in the local workspace.
            </summary>
            <param name="workingPath">The directory path when yuniql operations are executed from.</param>
        </member>
        <member name="M:Yuniql.Core.IWorkspaceService.IncrementMajorVersion(System.String,System.String)">
            <summary>
            Creates a new major version migration directory by incrementing the latest major version.
            </summary>
            <param name="workingPath">The directory path where yuniql operations are executed from.</param>
            <param name="sqlFileName">File name of sql file to be created.</param>
            <returns>The version created in v{Major}.{Minor} format.</returns>
        </member>
        <member name="M:Yuniql.Core.IWorkspaceService.IncrementMinorVersion(System.String,System.String)">
            <summary>
            Creates a new minor version migration directory by incrementing tha latest version.
            </summary>
            <param name="workingPath">The directory path where yuniql operations are executed from.</param>
            <param name="sqlFileName">File name of sql file to be created.</param>
            <returns>The version created in v{Major}.{Minor} format.</returns>
        </member>
        <member name="M:Yuniql.Core.IWorkspaceService.Validate(System.String)">
            <summary>
            Validates the baseline directory structure. The following directories are always required to be present in the workspace else the migration would fail.
            Required folders are _init, _pre, v0.00, _draft, _post, and _erase.
            </summary>
            <param name="workingPath">The directory path where yuniql operations are executed from.</param>
        </member>
        <member name="T:Yuniql.Core.LocalVersion">
            <summary>
            Representions individual migration version entry.
            </summary>
        </member>
        <member name="M:Yuniql.Core.LocalVersion.#ctor(System.String)">
            <summary>
            Creates new instance of LocalVersion
            </summary>
            <param name="targetVersion">The target version in format v{Major}.{Minor}. Example v1.01 or v2.00.</param>
        </member>
        <member name="P:Yuniql.Core.LocalVersion.Major">
            <summary>
            Returns the major part of version.
            </summary>
        </member>
        <member name="P:Yuniql.Core.LocalVersion.Minor">
            <summary>
            Returns the minor part of version.
            </summary>
        </member>
        <member name="P:Yuniql.Core.LocalVersion.Label">
            <summary>
            Returns the label part of version.
            </summary>
        </member>
        <member name="P:Yuniql.Core.LocalVersion.SemVersion">
            <summary>
            Retuns verion in v{Major}.{Minor} format.
            Example v0.00 for baseline version.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Yuniql.Core.MetadataService" -->
        <member name="M:Yuniql.Core.MetadataService.#ctor(Yuniql.Extensibility.IDataService,Yuniql.Extensibility.ITraceService,Yuniql.Core.ITokenReplacementService)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.IsDatabaseExists(System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.CreateDatabase(System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.CreateSchema(System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.IsDatabaseConfigured(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.ConfigureDatabase(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.UpdateDatabaseConfiguration(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.GetCurrentVersion(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.GetAllAppliedVersions(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.GetAllVersions(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.InsertVersion(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,Yuniql.Core.TransactionContext,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MetadataService.ExecuteSql(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,Yuniql.Extensibility.ITraceService)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.MigrationService">
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.#ctor(Yuniql.Core.IWorkspaceService,Yuniql.Extensibility.IDataService,Yuniql.Extensibility.IBulkImportService,Yuniql.Core.IMetadataService,Yuniql.Core.ITokenReplacementService,Yuniql.Core.IDirectoryService,Yuniql.Core.IFileService,Yuniql.Extensibility.ITraceService,Yuniql.Core.IConfigurationService)">
            <inheritdoc /> 
        </member>
        <member name="M:Yuniql.Core.MigrationService.Run">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.Run(System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.RunVersionDirectories(System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.List{System.String},System.String,System.String,Yuniql.Core.TransactionContext,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.RunNonVersionDirectories(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.Erase">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.RunVersionSqlScripts(System.Data.IDbConnection,System.Data.IDbTransaction,Yuniql.Core.TransactionContext,System.Diagnostics.Stopwatch,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MigrationService.RunNonVersionSqlScripts(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.RunBulkImportScripts(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.GetCurrentVersion(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.GetAllVersions(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.MigrationService.IsTargetDatabaseLatest(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Yuniql.Core.MigrationServiceFactory">
            <summary>
            Factory class of creating instance of <see cref="T:Yuniql.Core.IMigrationService"/>.
            </summary>
        </member>
        <member name="M:Yuniql.Core.MigrationServiceFactory.#ctor(Yuniql.Extensibility.ITraceService)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MigrationServiceFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.MigrationServiceFactory.Create(Yuniql.Extensibility.IDataService,Yuniql.Extensibility.IBulkImportService)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.PluginAssemblyLoadContext">
            <summary>
            This is a collectible (unloadable) AssemblyLoadContext that loads the dependencies
            of the plugin from the plugin's binary directory.
            </summary>
        </member>
        <member name="P:Yuniql.Core.PluginAssemblyLoadContext.PluginPath">
            <summary>
            The location of the plugin binaries
            </summary>
        </member>
        <member name="M:Yuniql.Core.PluginAssemblyLoadContext.#ctor(System.Runtime.Loader.AssemblyLoadContext,System.String,Yuniql.Extensibility.ITraceService)">
            <inheritdoc />
        </member>
        <member name="M:Yuniql.Core.PluginAssemblyLoadContext.Load(System.Reflection.AssemblyName)">
            <summary>
            The Load method override causes all the dependencies present in the plugin's binary directory to get loaded
            into the HostAssemblyLoadContext together with the plugin assembly itself.
            The Interface assembly must not be present in the plugin's binary directory, otherwise we would
            end up with the assembly being loaded twice. Once in the default context and once in the HostAssemblyLoadContext.
            </summary>
            <param name="assemblyName">The assembly name to load.</param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Core.PluginAssemblyLoadContext.LoadUnmanagedDll(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Yuniql.Core.RESERVED_TOKENS">
            <summary>
            Global constants used for token replacement in sql statements
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_DB_NAME">
            <summary>
            Token for database name value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_SCHEMA_NAME">
            <summary>
            Token for schema name value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_TABLE_NAME">
            <summary>
            Token for table name value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_SEQUENCE_ID">
            <summary>
            Token for sequence id value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_VERSION">
            <summary>
            Token for version value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_APPLIED_ON_UTC">
            <summary>
            Token for applied utc date value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_APPLIED_BY_USER">
            <summary>
            Token for applied by user value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_APPLIED_BY_TOOL">
            <summary>
            Token for applied by tool value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_APPLIED_BY_TOOL_VERSION">
            <summary>
            Token for applied by tool version value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_STATUS">
            <summary>
            Token for status value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_DURATION_MS">
            <summary>
            Token for duration ms value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_FAILED_SCRIPT_PATH">
            <summary>
            Token for failed script value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_FAILED_SCRIPT_ERROR">
            <summary>
            Token for failed script error value when performing queries in version tracking table
            </summary>
        </member>
        <member name="F:Yuniql.Core.RESERVED_TOKENS.YUNIQL_ADDITIONAL_ARTIFACTS">
            <summary>
            Token for additional artifacts value when performing queries in version tracking table
            </summary>
        </member>
        <member name="T:Yuniql.Core.SUPPORTED_DATABASES">
            <summary>
            Global constants for identifying supported database platforms
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.SQLSERVER">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.POSTGRESQL">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.MYSQL">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.MARIADB">
            <summary>
            MariaDB
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.SNOWFLAKE">
            <summary>
            Snowflake DW
            </summary>
        </member>
        <member name="F:Yuniql.Core.SUPPORTED_DATABASES.REDSHIFT">
            <summary>
            Redshift DW
            </summary>
        </member>
        <member name="T:Yuniql.Core.TokenReplacementService">
            <summary>
            Replaces tokens in the script using the pattern ${TOKEN_KEY}. 
            Throws exception and fails the migration when some tokens not replaced due to missing token values passed from the client.
            </summary>
        </member>
        <member name="M:Yuniql.Core.TokenReplacementService.#ctor(Yuniql.Extensibility.ITraceService)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.TokenReplacementService.Replace(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.TraceSettings">
            <summary>
            Global settings for checking the level of trace message to write.
            </summary>
        </member>
        <member name="P:Yuniql.Core.TraceSettings.IsDebugEnabled">
            <summary>
            When true, trace messages will include debug messages.
            </summary>
        </member>
        <member name="P:Yuniql.Core.TraceSettings.Instance">
            <summary>
            Global singleton instance of trace settings
            </summary>
        </member>
        <member name="T:Yuniql.Core.TransactionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Yuniql.Core.TransactionContext.#ctor(Yuniql.Extensibility.DbVersion,System.Boolean)">
            <summary>
            Returns an instance of <see cref="T:Yuniql.Core.TransactionContext"/>
            </summary>
            <param name="failedDbVersion"></param>
            <param name="continueAfterFailure"></param>
        </member>
        <member name="P:Yuniql.Core.TransactionContext.LastKnownFailedVersion">
            <summary>
            Gets the last knwon failed version
            </summary>
        </member>
        <member name="P:Yuniql.Core.TransactionContext.LastKnownFailedScriptPath">
            <summary>
            Gets the failed script path.
            </summary>
        </member>
        <member name="P:Yuniql.Core.TransactionContext.ContinueAfterFailure">
            <summary>
            Gets the resolution option.
            </summary>
        </member>
        <member name="P:Yuniql.Core.TransactionContext.IsFailedScriptPathMatched">
            <summary>
            Gets a value indicating whether failed script path is matched.
            </summary>
        </member>
        <member name="M:Yuniql.Core.TransactionContext.SetFailedScriptPathMatch">
            <summary>
            Sets the failed script path as matched.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuniql.Core.WorkspaceService">
            <summary>
            Service responsible for initializing and managing the local workspace. A local workspace is a directory where yuniql operations are executed from.
            When user calls yuniql-init, a directory structure is created in the target workspace directory.
            </summary>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.#ctor(Yuniql.Extensibility.ITraceService,Yuniql.Core.IDirectoryService,Yuniql.Core.IFileService)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.Init(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.GetLatestVersion(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.IncrementMajorVersion(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.IncrementMinorVersion(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Yuniql.Core.WorkspaceService.Validate(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Yuniql.Core.YuniqlMigrationException">
            <summary>
            Custom exception thrown within yuniql migration.
            </summary>
        </member>
        <member name="M:Yuniql.Core.YuniqlMigrationException.#ctor">
            <summary>
            Custom exception thrown within yuniql migration.
            </summary>
        </member>
        <member name="M:Yuniql.Core.YuniqlMigrationException.#ctor(System.String)">
            <summary>
            Creates new YuniqlMigrationException.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Yuniql.Core.YuniqlMigrationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new YuniqlMigrationException.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception captured prior to this exception.</param>
        </member>
    </members>
</doc>

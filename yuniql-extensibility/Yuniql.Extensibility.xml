<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yuniql.Extensibility</name>
    </assembly>
    <members>
        <member name="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException">
            <summary>
            An exception that is thrown when the <see cref="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ReadFields"/> method cannot parse a row using the specified format.
            </summary>
            <remarks>
            Based on <code>Microsoft.VisualBasic.FileIO.MalformedLineException.MalformedLineException</code>.
            </remarks>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException.#ctor(System.String,System.Int64)">
            <summary>
            Constructs an exception with a specified message and a line number.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Constructs an exception with a specified message, a line number, and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException.LineNumber">
            <summary>
            The line number of the malformed line.
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser">
            <summary>
            Parses comma-separated text files.
            </summary>
            <remarks>
            Based on <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>.
            </remarks>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.IO.Stream)">
            <summary>
            Constructs a parser from the specified input stream.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option, and optionally leaves the stream open.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.String)">
            <summary>
            Constructs a parser from the specified input file path.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs a parser from the specified input text reader.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.EndOfData">
            <summary>
            True if there are non-empty lines between the current cursor position and the end of the file.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.
            </summary>
            <returns>An array of strings that contains field values for the current line, or null if <see cref="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.EndOfData"/> is true.</returns>
            <exception cref="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException">if the parse of the current line failed</exception>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.LineNumber">
            <summary>
            The number of the line that will be returned by <see cref="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ReadFields"/> (starting at 1), or -1 if there are no more lines.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.Close">
            <summary>
            Closes the current <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.Dispose">
            <summary>
            Closes and disposes the current <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.Dispose(System.Boolean)">
            <summary>
            Disposes of the current <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser"/> object.
            </summary>
            <param name="disposing">true if called from <see cref="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.Dispose"/>, or false if called from a finalizer</param>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ErrorLine">
            <summary>
            The line that caused the most recent <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException"/>.
            </summary>
            <remarks>
            If no <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException"/> exceptions have been thrown, an empty string is returned.
            The <see cref="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ErrorLineNumber"/> property can be used to display the number of the line that caused the exception.
            </remarks>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ErrorLineNumber">
            <summary>
            Returns the number of the line that caused the most recent <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException"/> exception.
            </summary>
            <remarks>
            If no <see cref="T:Yuniql.Extensibility.BulkCsvParser.CsvMalformedLineException"/> exceptions have been thrown, -1 is returned.
            The <see cref="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.ErrorLine"/> property can be used to display the number of the line that caused the exception.
            Blank lines and comments are not ignored when determining the line number.
            </remarks>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.CompatibilityMode">
            <summary>
            True if this parser should exactly reproduce the behavior of the <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.Separators">
            <summary>
            Defines the separators or separators for a text file.
            Default is a comma.
            </summary>
            <remarks>
            This is defined as an array of strings for compatibility with <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>,
            but this parser only supports one single-character separator.
            </remarks>
            <exception cref="T:System.ArgumentException">A separator value is set to a newline character, an empty string, or null.</exception>
            <exception cref="T:System.NotSupportedException">The separators are set to an array that does not contain exactly one element with exactly one character.</exception>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.SetSeparator(System.Char)">
            <summary>
            Sets the separator character used by this parser.
            Default is a comma.
            </summary>
            <exception cref="T:System.ArgumentException">The separator character is set to a newline character.</exception>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.SetQuoteCharacter(System.Char)">
            <summary>
            Sets the quote character used by this parser, and also sets the quote escape character to match if it previously matched.
            Default is a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote character is set to a newline character.</exception>
        </member>
        <member name="M:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.SetQuoteEscapeCharacter(System.Char)">
            <summary>
            Sets the quote escape character used by this parser.
            Default is the same as the quote character, a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote escape character is set to a newline character.</exception>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.HasFieldsEnclosedInQuotes">
            <summary>
            Denotes whether fields are enclosed in quotation marks when a CSV file is being parsed.
            Defaults to <code>true</code>.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.BulkCsvParser.CsvTextFieldParser.TrimWhiteSpace">
            <summary>
            Indicates whether leading and trailing white space should be trimmed from field values.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.ConnectionInfo">
            <summary>
            Connection information to target database.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.ConnectionInfo.Database">
            <summary>
            The target database name.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.ConnectionInfo.DataSource">
            <summary>
            The host server or database instance in a cluster.
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.DbVersion">
            <summary>
            Metadata information about migration version.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.SequenceId">
            <summary>
            Unique sequence id for the version.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.Version">
            <summary>
            The version itself as reflected in the directory structure.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.AppliedOnUtc">
            <summary>
            The date and time in UTC when migration was run.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.AppliedByUser">
            <summary>
            The user id used when migration was performed.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.AppliedByTool">
            <summary>
            The yuniql client that executed the migration step.
            This can be yuniql-cli, yuniql-aspnetcore, yuniql-core, yuniql-azdevops
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.AppliedByToolVersion">
            <summary>
            The version of client that executed the migration step.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.AdditionalArtifacts">
            <summary>
            Additional information that describes the execution of the version
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.Status">
            <summary>
            The status of version execution
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.DurationMs">
            <summary>
            The execution time of the version in milliseconds
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.FailedScriptPath">
            <summary>
            The full path of last failed script file
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersion.FailedScriptError">
            <summary>
            The error details from the last failed script file
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.DbVersionData">
            <summary>
            Extended data to describe the migration version.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersionData.Version">
            <summary>
            The version of this artifact schema
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.DbVersionData.Data">
            <summary>
            Serialized BLOB of all scripts executed in the version.
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.DEFAULT_CONSTANTS">
            <summary>
            Globa default values.
            </summary>
        </member>
        <member name="F:Yuniql.Extensibility.DEFAULT_CONSTANTS.COMMAND_TIMEOUT_SECS">
            <summary>
            Default command timeout in seconds.
            </summary>
        </member>
        <member name="F:Yuniql.Extensibility.DEFAULT_CONSTANTS.BULK_BATCH_SIZE">
            <summary>
            Default batch size of bulk load operations.
            </summary>
        </member>
        <member name="F:Yuniql.Extensibility.DEFAULT_CONSTANTS.BULK_SEPARATOR">
            <summary>
            Default CSV file values separator.
            </summary>
        </member>
        <member name="T:Yuniql.Extensibility.EnvironmentHelper">
            <summary>
            Helper class for extracting environment variables.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.EnvironmentHelper.GetEnvironmentVariable(System.String)">
            <summary>
            Extract values of environment variable with respect to OS platform.
            For Windows, the order of ENV variable search is Machine -> User -> Process.
            For Linux, it will always use Process.
            </summary>
            <param name="name">Environment varible name.</param>
            <returns>Value of the environment variable.</returns>
        </member>
        <member name="T:Yuniql.Extensibility.IBulkImportService">
            <summary>
            Implement this interface to support bulk import on a target database platform or provider.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IBulkImportService.Initialize(System.String)">
            <summary>
            Initialize the bulk import service. Sets connection string for future operations.
            </summary>
            <param name="connectionString">Connection string to the target database.</param>
        </member>
        <member name="M:Yuniql.Extensibility.IBulkImportService.Run(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Runs the bulk import process using custom or native APIs in the target database platform.
            </summary>
            <param name="connection">An connection to target database.</param>
            <param name="transaction">An active transaction.</param>
            <param name="fileFullPath">Fully qualified path to the CSV file.</param>
            <param name="bulkSeparator">Bulk file values separator used in CSV file. When NULL, defaults to command ",".</param>
            <param name="bulkBatchSize">Size of bacth for bulk load operation.</param>
            <param name="commandTimeout">Command timeout in seconds.</param>
        </member>
        <member name="T:Yuniql.Extensibility.IDataService">
            <summary>
            Implement this interface to support a database platform or provider.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.Initialize(System.String)">
            <summary>
            Initialize the bulk import service. Sets connection string for future operations.
            </summary>
            <param name="connectionString">Connection string to the target database.</param>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.CreateConnection">
            <summary>
            Creates new connection to target database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.CreateMasterConnection">
            <summary>
            Creates new connection to master or metadata database. This is used to check if the database exists when --auto-createdb is set to true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetConnectionInfo">
            <summary>
            Get basic connection information to target database.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.IsTransactionalDdlSupported">
            <summary>
            Returns true if the database platform or version supports Atomic or Transactional DDL operations.
            MySql version below 8.0 are known to not support atomic DDL. Other providers like SqlServer, Oracle and PostgreSql 
            supports rollback of DDL operations should migration failed.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.IsSchemaSupported">
            <summary>
            Returns true if the database platform or version supports Schema within the database.
            MySql version below 8.0 are known to not support Schema.
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.IsBatchSqlSupported">
            <summary>
            Returns true if the database platform or version supports batch sql statements.
            For example, SQL Server uses GO word as default batch terminator while Snowflow uses semicolon (;).
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.IsUpsertSupported">
            <summary>
            Returns true if the database supports single MERGE or UPSERT sql statement
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.SchemaName">
            <summary>
            Default schema name for schema versions table. Leave it null if database doesn't support schema.
            For example its dbo in SqlServer and public in PostgreSql
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.IDataService.TableName">
            <summary>
            Table name for schema versions table.
            When implementing a new platform, its reccommended to use __yuniqldbversion as default value
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.BreakStatements(System.String)">
            <summary>
            Breaks down statement using terminator word supported by target database.
            For example, SQL Sevrer uses GO to split statements from single file.
            </summary>
            <param name="sqlStatement">Raw sql statement as extracted from .sql file.</param>
            <returns>List of statements separated by terminator.</returns>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForCheckIfDatabaseExists">
            <summary>
            Returns the SQL statement to use for checking if the target database already exists
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForCreateDatabase">
            <summary>
            Returns the SQL statement to use for creating new database if --auto-createdb flag is set to true.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForCreateSchema">
            <summary>
            Returns the SQL statement to use for creating schema if the target database supports schemas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForCheckIfDatabaseConfigured">
            <summary>
            Returns the SQL statement to use for checking target database has been configured for migration tracking.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForConfigureDatabase">
            <summary>
            Returns the SQL statement to use for configuring the migration tracking table.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForGetCurrentVersion">
            <summary>
            Returns the SQL statement to use for getting the latest migration version appplied in the target database.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForGetAllVersions">
            <summary>
            Returns the SQL statement to use for getting all versions applied in the target database.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForInsertVersion">
            <summary>
            Returns the SQL statement to use for creating new entry into migration tracking table.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForUpdateVersion">
            <summary>
            Returns the SQL statement to use for updating version in migration tracking table.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.GetSqlForUpsertVersion">
            <summary>
            Returns the SQL statement to use for merging new entry into migration tracking table.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.UpdateDatabaseConfiguration(System.Data.IDbConnection,Yuniql.Extensibility.ITraceService,System.String,System.String)">
            <summary>
            Updates the database migration tracking table.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <param name="traceService">The trace service.</param>
            <param name="metaSchemaName">Schema name for schema versions table. When empty, uses the default schema in the target data platform. </param>
            <param name="metaTableName">Table name for schema versions table. When empty, uses __yuniqldbversion.</param>
            <returns>True if target database was updated, otherwise returns false</returns>
        </member>
        <member name="M:Yuniql.Extensibility.IDataService.TryParseErrorFromException(System.Exception,System.String@)">
            <summary>
            Try parses error from database specific exception.
            </summary>
            <param name="exc">The exc.</param>
            <param name="result">The parsed error.</param>
            <returns>
            True, if the parsing was sucessfull otherwise false
            </returns>
        </member>
        <member name="T:Yuniql.Extensibility.IMixableTransaction">
            <summary>
            Support for non-transactional flow (when version scripts are not executed in transaction)
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.IMixableTransaction.GetSqlForUpsertVersion">
            <summary>
            Gets the SQL for insert or update version for non-transactional platform.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuniql.Extensibility.ITraceService">
            <summary>
            Implement this interface to write trace information to desired sink or log store. 
            </summary>
        </member>
        <member name="P:Yuniql.Extensibility.ITraceService.IsDebugEnabled">
            <summary>
            When true, debug messages are always written in Trace logs.
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.ITraceService.Debug(System.String,System.Object)">
            <summary>
            Writes debug messages.
            </summary>
            <param name="message">The message to write.</param>
            <param name="payload">JSON structured information to support the trace entry.</param>
        </member>
        <member name="M:Yuniql.Extensibility.ITraceService.Info(System.String,System.Object)">
            <summary>
            Writes informational messages.
            </summary>
            <param name="message">The message to write.</param>
            <param name="payload">JSON structured information to support the trace entry.</param>
        </member>
        <member name="M:Yuniql.Extensibility.ITraceService.Warn(System.String,System.Object)">
            <summary>
            Writes warning messages.
            </summary>
            <param name="message">The message to write.</param>
            <param name="payload">JSON structured information to support the trace entry.</param>
        </member>
        <member name="M:Yuniql.Extensibility.ITraceService.Error(System.String,System.Object)">
            <summary>
            Writes error messages.
            </summary>
            <param name="message">The message to write.</param>
            <param name="payload">JSON structured information to support the trace entry.</param>
        </member>
        <member name="M:Yuniql.Extensibility.ITraceService.Success(System.String,System.Object)">
            <summary>
            Writes success informational messages.
            </summary>
            <param name="message">The message to write.</param>
            <param name="payload">JSON structured information to support the trace entry.</param>
        </member>
        <member name="T:Yuniql.Extensibility.StringExtensions">
            <summary>
            Extensions to String class
            </summary>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.Fixed(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.Quote(System.String)">
            <summary>
            Retursn a single qouted string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.IsSingleQuoted(System.String)">
            <summary>
            Returns true when string is enclosed in single quote
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.DoubleQuote(System.String)">
            <summary>
            Retursn a double qouted string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.IsDoubleQuoted(System.String)">
            <summary>
            Returns true when string is enclosed in double quote
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.Escape(System.String)">
            <summary>
            Replaces \ with \\ in string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.Unescape(System.String)">
            <summary>
            Replaces \\ with \ in string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.SplitSchema(System.String,System.String)">
            <summary>
            Returns schema name and object name
            </summary>
            <param name="objectName"></param>
            <param name="defaultSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Yuniql.Extensibility.StringExtensions.SplitBulkFileName(System.String,System.String)">
            <summary>
            Returns segments of a file to represent sequence no, schema name and table name
            These are the valid file name patterns: 1.myschema.mytable, 01.myschema.mytable, myschema.mytable, 1.mytable, 01.mytable, mytable
            If you dont specify the schema, the default schema will derived from specific database platform
            </summary>
            <param name="objectName"></param>
            <param name="defaultSchema"></param>
            <returns></returns>
        </member>
    </members>
</doc>
